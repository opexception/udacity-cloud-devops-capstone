version: 2.1
orbs:
  aws-cli: circleci/aws-cli@1.4.0

commands:
  destroy-environment:
    description: Destroy cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name capstone-${CIRCLE_WORKFLOW_ID}
  setup-rust-nightly:
    description: Use Rust nightly as required by Rocket framework
    steps:
      - run:
          name: set rust version default to nightly
          command: rustup default nightly

# rust circleci setup gleaned from https://gist.github.com/LukeMathWalker/6153b07c4528ca1db416f24b09038fca
jobs:
  build-and-test:
    docker:
      - image: circleci/rust
    environment:
      # Fail the build if there are warnings
      RUSTFLAGS: '-D warnings'
    steps:
      - checkout
      - setup-rust-nightly
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - run:
          name: Calculate dependencies
          command: |
            cd hello_world
            cargo generate-lockfile
      - restore_cache:
          keys:
            - cache-{{ arch }}-<< pipeline.id >>
      - run:
          name: Build all targets
          command: |
            cd hello_world
            cargo build
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - hello_world/target/debug/.fingerprint
            - hello_world/target/debug/build
            - hello_world/target/debug/deps
            - hello_world/target/debug/hello_world
          key: cache-{{ arch }}-<< pipeline.id >>
      - run:
          name: Run all tests
          command: |
            cd hello_world
            cargo test

  security:
    docker:
      - image: circleci/rust
    steps:
      - checkout
      - setup-rust-nightly
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - run:
          name: Cache permission
          command: |
            sudo chown -R $(whoami):$(id -ng) /usr/local/cargo
      - restore_cache:
          keys:
            - cache-{{ arch }}-<< pipeline.id >>
      - run:
          name: Install dependency auditing tool
          command: cargo install cargo-audit
      - save_cache:
          paths:
            - /usr/local/cargo
          key: cache-{{ arch }}-<< pipeline.id >>
      - run:
          name: Check for known security issues in dependencies
          command: |
            cd hello_world
            cargo audit

  format:
    docker:
      - image: circleci/rust
    steps:
      - checkout
      - setup-rust-nightly
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - run:
          name: Install formatter
          command: rustup component add rustfmt
      - run:
          name: Formatting
          command: |
            cd hello_world
            cargo fmt --all -- --check

  lint:
    docker:
      - image: circleci/rust
    steps:
      - checkout
      - setup-rust-nightly
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - run:
          name: Install Clippy
          command: rustup component add clippy
      - run:
          name: Linting
          command: |
            cd hello_world
            cargo clippy -- -D warnings
  
  build-final:
    docker:
      - image: circleci/rust
    environment:
      # Fail the build if there are warnings
      RUSTFLAGS: '-D warnings'
    steps:
      - checkout
      - setup-rust-nightly
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - run:
          name: Calculate dependencies
          command: |
            cd hello_world
            cargo generate-lockfile
      # - restore_cache:
      #     keys:
      #       - build-cache-{{ arch }}-<< pipeline.id >>
      - run:
          name: Build all targets
          command: |
            pwd
            cd hello_world
            rustup target add x86_64-unknown-linux-gnu
            cargo build --target=x86_64-unknown-linux-gnu --release
            ls -al target/x86_64-unknown-linux-gnu/release
      # - save_cache:
      #     paths:
      #       - hello_world/target/x86_64-unknown-linux-gnu/release/hello_world
      #     key: build-cache-{{ arch }}-<< pipeline.id >>
      - persist_to_workspace:
          root: ~/project
          paths:
            - hello_world/target/*


  build-image:
    docker:
      - image: docker:git
    steps:
      - checkout
      # - restore_cache:
      #     keys:
      #       - build-cache-{{ arch }}-<< pipeline.id >>
      - attach_workspace:
          at: ~/project
      - setup_remote_docker
          # Layer caching requires paid CircleCI account
          #docker_layer_caching: true
      - run:
          name: Sanity check
          command: |
            pwd
            ls -al ~/project
            ls -al ~/project/hello_world/target/x86_64-unknown-linux-gnu/release
      - run:
          name: build and push Docker image
          command: |
            pwd
            ls -al
            docker build --tag=$DOCKER_USER/udacity-cloud-devops-engineer-capstone .
            imageID=$(docker image ls | grep 'udacity-cloud-devops-engineer-capstone' | awk '{print $3}')
            docker image ls
            echo "I think the image ID I just built is $imageID"
            echo $DOCKER_PWD | docker login -u $DOCKER_USER --password-stdin
            docker tag $imageID $DOCKER_USER/udacity-cloud-devops-engineer-capstone:${CIRCLE_WORKFLOW_ID}
            #docker tag $imageID $DOCKER_USER/udacity-cloud-devops-engineer-capstone:latest
            docker tag $imageID $DOCKER_USER/udacity-cloud-devops-engineer-capstone:v1.0
            docker push -a $DOCKER_USER/udacity-cloud-devops-engineer-capstone:${CIRCLE_WORKFLOW_ID}

  deploy-infra:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/aws/infra.yml \
              --tags project=udacity-capstone workflowid=${CIRCLE_WORKFLOW_ID} \
              --stack-name capstone-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID}  
      - run:
          name: Gather backend IP Address
          command: |
              IPADDR=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters Name=tag:Name,Values=capstone-${CIRCLE_WORKFLOW_ID} \
              --output text)
              curl -H "Content-Type: text/plain" \
              -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request PUT \
              --data "${IPADDR}" \
              https://api.memstash.io/values/deployment
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" > ~/project/.circleci/ansible/inventory.txt
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:Name,Values=capstone-${CIRCLE_WORKFLOW_ID} \
            --output text >> ~/project/.circleci/ansible/inventory.txt
      # - save_cache:
      #     paths:
      #       - ~/project/.circleci/ansible/inventory.txt
      #     key: << pipeline.id >>-deploy-infra
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment
  
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "f4:71:b5:ea:3e:fd:b1:fa:31:65:35:c8:e1:c9:3a:da"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            pip3 install --upgrade pip \
              && pip3 install awscli
      - run:
          name: Configure server
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml --extra-vars "dockerimage=$DOCKER_USER/udacity-cloud-devops-engineer-capstone:${CIRCLE_WORKFLOW_ID} containername=capstone-${CIRCLE_WORKFLOW_ID}"
      - destroy-environment  

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - run:
          name: Install dependencies
          command: |
            apk add curl
            pip3 install --upgrade pip \
              && pip3 install awscli
      - run:
          name: Get URL
          command: |
            BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/deployment)
            echo "I think the Backend IP is ${BACKEND_IP}"
            echo ${BACKEND_IP} > /tmp/backend
            echo -n "The file /tmp/backend contains IP:"
            cat /tmp/backend
      - run:
          name: smoke test.
          command: |
            BACKEND_URL="http://$(cat /tmp/backend):8000"
            echo "curl-ing ${BACKEND_URL}"
            if curl ${BACKEND_URL} | grep -q "Hello"
              then exit 0
              else exit 1
            fi 
      - destroy-environment
  
  # blue-green-deploy:

workflows:
  version: 2
  build-test:
    jobs:
      - build-and-test
          # filters:
          #   tags:
          #     ignore: /^infra.*/
      - security
          # filters:
          #   tags:
          #     ignore: /^infra.*/
      - format
          # filters:
          #   tags:
          #     ignore: /^infra.*/
      - lint
          # filters:
          #   tags:
          #     ignore: /^infra.*/
      - build-final
          # filters:
          #   tags:
          #     ignore: /^infra.*/
      - build-image:
          requires: [build-final, build-and-test, security, format, lint]
          # filters:
          #   tags:
          #     ignore: /^infra.*/
      - deploy-infra:
          requires: [build-image]
          # filters:
          #   tags:
          #     only: /^infra.*/
      - configure-infrastructure:
          requires: [deploy-infra]
          # filters:
          #   tags:
          #     only: /^infra.*/
      - smoke-test:
          requires: [configure-infrastructure]
          # filters:
          #   tags:
          #     ignore: /^infra.*/
      # - blue-green-deploy:
      #     requires: [smoke-test] 
      #     filters:
      #       branches:
      #         only: [master]

